@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState

<div class="main">
    <ul class="pizza-cards">
        @if (Specials != null)
        {
            foreach (var Special in Specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(Special))"
                    style="background-image:url('@Special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@Special.Name</span>
                        @Special.Description
                        <span class="price">
                            @Special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if(OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu orden</h2>
            @foreach(var ConfiguredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="ConfiguredPizza"
                                     OnRemoved=
                                     "@(() => 
                                        OrderState.RemoveConfigurePizzaDialog(ConfiguredPizza))"
                                     />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una pizza 
        <br/> para empezar</div>
    }
    @*Cuando no haya pizzas oculta el total*@
<div class="order-total @(OrderState.Order.Pizzas.Any()?"":"hidden")">
    Total:
    <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
    <a href="checkout" class="btn btn-warning"
            disabled="@(OrderState.Order.Pizzas.Count == 0)">
        Ordenar >
    </a>
</div>
</div>

@if(OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                          OnCancel="OrderState.CancelConfigurePizzaDialog"
                          OnConfirm="OrderState.ConfirmConfigurePizzaDialog"/>
}

@code{
    List<PizzaSpecial> Specials;

    protected async override Task OnInitializedAsync()
    {
        Specials = await
            HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");

    }

    
    
}
